---

- name: Create a virtual machine and configure as a build environment in Azure
  hosts: localhost

  vars:
    ansible_python_interpreter: /opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/bin/python3.11
    terraform_path: 
      build_vm: "../azure/compute/build-vm"
    resourceGroupName: my-base-rg
    location: australiaeast
    network:
      name: vnet
      cidr: 10.0.0.0/22
      subnet:
        name: vm-subnet
        cidr: 10.0.0.0/24
      nsg:
        name: vm-nsg
    vm:
      ssh_key_path: '~/.ssh/id_rsa.pub'
      ssh_priv_key_path: '~/.ssh/id_rsa'
      size: Standard_B1s
      name: build-vm
      public_ip:
        enable: true
        name: build-vm-pip
      nic:
        name: build-vm-nic
      image:
        offer: 0001-com-ubuntu-server-jammy
        sku: 22_04-lts
  
  tasks:

    - name: Get the current user name
      ansible.builtin.command: whoami
      register: userdetails

    - name: Get the current users internet address
      ansible.builtin.shell: |
        set timeout 300
        dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | sed 's/\"//g'
        exit 0
      register: my_ip

    - name: Report public IP address
      debug:
        msg: "Public IP address of current user is {{ my_ip.stdout }}"

    # - debug: 
    #     msg: "my_ip = {{ my_ip }}"

    # - name: DEBUG EXIT
    #   ansible.builtin.fail: 
    #     msg: "DEBUG EXIT"
    
    - name: Confirm SSH public key exists
      ansible.builtin.stat:
        path: "{{ vm.ssh_key_path }}"
      register: ssh_pub_key_file

    - name: Confirm SSH private key exists
      ansible.builtin.stat:
        path: "{{ vm.ssh_priv_key_path }}"
      register: ssh_priv_key_file

    - name: Fail if the SSH public key does not exist
      ansible.builtin.fail:
        msg: "ERORR: Public key not found."
      when: not ssh_pub_key_file.stat.exists

    - name: Fail if the SSH private key does not exist
      ansible.builtin.fail:
        msg: "ERORR: Private key not found."
      when: not ssh_priv_key_file.stat.exists

    - name: Create the azure resource with terraform
      community.general.terraform:
        project_path: "{{ terraform_path.build_vm }}"
        state: present
        force_init: true
        variables:
          resource_group_name: "{{ resourceGroupName }}"
          admin_username: "{{ userdetails.stdout }}"
          public_ip_name: "{{ vm.public_ip.name }}"
          location: "{{ location }}"
          vm_name: "{{ vm.name }}"
          vm_size: "{{ vm.size }}" 
          my_ip_address: "{{ my_ip.stdout }}"
          image_offer: "{{ vm.image.offer }}"
          image_sku: "{{ vm.image.sku }}"
    

    - name: Get the information on the created public IP
      azure.azcollection.azure_rm_publicipaddress_info:
        resource_group: "{{ resourceGroupName }}"
        name: "{{ vm.public_ip.name }}"
      register: publicIP    

    - name: Set the IP address
      set_fact:
        buildvm_IP: "{{ publicIP.publicipaddresses[0].ip_address  }}"

    - name: Show IP address
      debug:
        msg: "Public IP address of new VM is {{ buildvm_IP }}"

    - name: Register buildvm as host
      ansible.builtin.add_host:
        hostname: "{{ buildvm_IP  }}"
        key: "{{ vm.ssh_priv_key_path }}"
        group: created_hosts

    - name: Add new host to list of known hosts
      ansible.builtin.shell: |
        set timeout 300
        ssh -o StrictHostKeyChecking=no -i {{ vm.ssh_priv_key_path }} {{ userdetails.stdout }}@{{ buildvm_IP  }} 'echo $USERID'
       
- name: Setup build virtual machine
  hosts: created_hosts
  become: true

  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: '~/.ssh/id_rsa'
    default:
      shell: /bin/bash
      temp_dir: '/tmp'
      bin_dir: '/usr/local/bin'
    packages:
      podman: true
      az: true
      terraform: true
      oc: true
      jq: true
      helm: true

  tasks:

    - name: Update packages on server
      apt:
        upgrade: dist

    - name: Install az cli on host
      ansible.builtin.shell: |
        set timeout 300
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        exit 0
      when: packages.az
    
    - name: Install jq package on host
      apt:
        state: present
        name:
          - jq
        update_cache: true
      when: packages.jq

    - name: Install podman packages on host
      apt:
        state: present
        name:
          - jq
          - podman
        update_cache: true
      when: packages.podman

    - name: Install helm package on host
      ansible.builtin.shell: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        apt install -y apt-transport-https
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
        apt update
        apt install -y helm
      when: packages.helm

    - name: Install Red Hat oc cli on host
      ansible.builtin.shell: |
        set timeout 300
        TMP_DIR="{{ default.temp_dir }}"
        BIN_DIR="{{ default.bin_dir }}"
        ARCH=$(uname -m)
        OC_FILETYPE="linux"
        KUBECTL_FILETYPE="linux"
        OC_URL="https://mirror.openshift.com/pub/openshift-v4/${ARCH}/clients/ocp/latest/openshift-client-${OC_FILETYPE}.tar.gz"

        curl -Lo $TMP_DIR/openshift-client.tgz $OC_URL
        tar xzf ${TMP_DIR}/openshift-client.tgz -C ${TMP_DIR} oc
        mv ${TMP_DIR}/oc ${BIN_DIR}/oc
        rm ${TMP_DIR}/openshift-client.tgz
        exit 0
      when: packages.oc

    - name: Install hashicorp terraform on host
      ansible.builtin.shell: |
        set timeout 300
        apt update && apt install -y gnupg software-properties-common
        wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          tee /etc/apt/sources.list.d/hashicorp.list
        apt update
        apt install -y terraform
        exit 0
      when: packages.terraform

    
    