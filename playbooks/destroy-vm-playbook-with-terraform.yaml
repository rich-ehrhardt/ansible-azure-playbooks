---

- name: Create a virtual machine and configure as a build environment in Azure
  hosts: localhost

  vars:
    ansible_python_interpreter: /opt/homebrew/Cellar/python@3.11/3.11.7_1/Frameworks/Python.framework/Versions/3.11/bin/python3.11
    terraform_path: 
      build_vm: "../azure/compute/build-vm"
    resourceGroupName: my-base-rg
    location: australiaeast
    network:
      name: vnet
      cidr: 10.0.0.0/22
      subnet:
        name: vm-subnet
        cidr: 10.0.0.0/24
      nsg:
        name: vm-nsg
    vm:
      ssh_key_path: '~/.ssh/id_rsa.pub'
      ssh_priv_key_path: '~/.ssh/id_rsa'
      size: Standard_B1s
      name: build-vm
      public_ip:
        enable: true
        name: build-vm-pip
      nic:
        name: build-vm-nic
      image:
        offer: 0001-com-ubuntu-server-jammy
        sku: 22_04-lts
  
  tasks:

    - name: Get the current user name
      ansible.builtin.command: whoami
      register: userdetails

    - name: Get the current users internet address
      ansible.builtin.shell: |
        set timeout 300
        dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | sed 's/\"//g'
        exit 0
      register: my_ip

    - name: Report public IP address
      debug:
        msg: "Public IP address of current user is {{ my_ip.stdout }}"
    
    - name: Confirm SSH public key exists
      ansible.builtin.stat:
        path: "{{ vm.ssh_key_path }}"
      register: ssh_pub_key_file

    - name: Confirm SSH private key exists
      ansible.builtin.stat:
        path: "{{ vm.ssh_priv_key_path }}"
      register: ssh_priv_key_file

    - name: Fail if the SSH public key does not exist
      ansible.builtin.fail:
        msg: "ERORR: Public key not found."
      when: not ssh_pub_key_file.stat.exists

    - name: Fail if the SSH private key does not exist
      ansible.builtin.fail:
        msg: "ERORR: Private key not found."
      when: not ssh_priv_key_file.stat.exists

    - name: Destroy the azure resources with terraform
      community.general.terraform:
        project_path: "{{ terraform_path.build_vm }}"
        state: absent
        force_init: true
        variables:
          resource_group_name: "{{ resourceGroupName }}"
          admin_username: "{{ userdetails.stdout }}"
          public_ip_name: "{{ vm.public_ip.name }}"
          location: "{{ location }}"
          vm_name: "{{ vm.name }}"
          vm_size: "{{ vm.size }}" 
          my_ip_address: "{{ my_ip.stdout }}"
          image_offer: "{{ vm.image.offer }}"
          image_sku: "{{ vm.image.sku }}"
    


    
    